{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.514fc969.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = ({name , email,id}) => {\r\n    return(\r\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5\">\r\n            <img src ={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;\r\n//can also do const {id,name,email} = props [this might be enough]","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({ robots })=>{ \r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                        return ( < Card key = {i}\r\n                            id = {robots[i].id}\r\n                            name = {robots[i].name}\r\n                            email = {robots[i].email}\r\n                            />);\r\n                        })\r\n                }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox = ({\r\n    searchfield,\r\n    searchChange\r\n}) => {\r\n    return ( <\r\n        div className = 'pa2' >\r\n        <\r\n        input className = 'pa3 ba b--green bg-lightest-blue'\r\n        type = 'search'\r\n        placeholder = 'search robots'\r\n        onChange = {\r\n            searchChange\r\n        }\r\n        /> \r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style = {{overflowY:'scroll',border:'1px solid black',height :'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","import React,{ Component } from 'react';\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false,\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. That's not right</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React,{ Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport './App.css';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robots } from '../robots';//for multiple export we need to use {}\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport { setSearchField , requestRobots } from '../actions';\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending : state.requestRobots.isPending,\r\n        error : state.requestRobots.error,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value))\r\n       ,onRequestRobots : ()=>dispatch(requestRobots())\r\n    }\r\n}\r\nclass App extends Component { \r\n    // constructor(){//using constructors in order to understand implementation of states\r\n    //     super();//to call the parent of component\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //     }\r\n    // }\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const { searchField, onSearchChange,robots , isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return isPending ?\r\n             <h1>Loading...</h1>\r\n            : (\r\n            <div className='tc'>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange = { onSearchChange }/>\r\n                <Scroll>\r\n                    <ErrorBoundary >\r\n                        <CardList robots = {filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );   \r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD , \r\n    REQUEST_ROBOTS_PENDING , \r\n    REQUEST_ROBOTS_SUCCESS , \r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text)=>({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text,\r\n})\r\n\r\nexport const requestRobots = () => (dispatch)=>{\r\n    dispatch ({ type : REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch ( {type: REQUEST_ROBOTS_SUCCESS,payload:data} ))\r\n    .catch(error => dispatch({ type:REQUEST_ROBOTS_FAILED , payload:error }))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst intialStateSearch = {\r\n    searchField : '',\r\n}\r\nexport const searchRobots = (state=intialStateSearch,action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n          return Object.assign({}, state,{searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots: [],\r\n    error : ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots : action.payload,isPending: false})\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {error:action.payload,isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore,applyMiddleware , combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots ,requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App  />\n      </Provider>      \n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}